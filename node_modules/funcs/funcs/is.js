;(function() {
    "use strict";

    // набо функция для проверок на что-либо

    f.classOf = function(a) {
        return Object.prototype.toString.call( a ).slice(8, -1);
    };

    f.isFileList = function(a) {
        return f.classOf(a) == 'FileList' || f.isArray(a) && a.every(function(x) {
            return f.classOf(x) == 'File';
        });
    };

    f.isFunction = function( a ) {
        return typeof a === 'function';
    };

    f.isArray = function( a ) {
        // так быстрее, чем classof
        return a instanceof Array;
    };

    f.isObject = function( a ) {
        return a && typeof a === "object" && !(a instanceof Array);
    };

    f.isObjOrArr = function(a) {
        return f.isObject(a) || f.isArray(a);
    };

    f.isString = function( a ) {
        return typeof a == 'string';
    };

    f.isNumber = function( a ) {
        return typeof a == 'number' && +a === a;
    };

    f.isFile = function(a) {
        return a instanceof window.File || a instanceof window.Blob;
    };

    // проверяем является ли объект непосредственным наследником Object.prototype
    f.isEasyObject = function(obj) {
        return f.isObject(obj) && obj.constructor.prototype === Object.prototype
    };

    // проверка на массив, в котором все элементы это функции
    f.isArrayWithFuncs = function(arr) {
        if ( !f.isArray(arr) ) {
            return false;
        }

        for (var i=0, n=arr.length; i<n; i++) {
            if ( !f.isFunction(arr[i]) ) {
                return false;
            }
        }

        return true;
    };

    // проверяем что ev, это DOM событие
    f.isEvent = function(ev) {
        var out = false;
        if ( typeof jQuery != 'undefined' || typeof Events != 'undefined' ) {

            if ( typeof jQuery != 'undefined' ) {
                out = out || ev instanceof jQuery.Event;
            }

            if ( typeof Events != 'undefined' ) {
                out = out || ev instanceof Events;
            }
        }
        return out;
    };

    f.isNaN = function(a) {
        return typeof a == 'number' && +a !== a;
    };

    f.isPrimitive = function(a) {
        return typeof a !== 'object' && a !== null;
    };

    f.isDate = function(a) {
        return f.classOf(a) == "Date";
    };

    // проверяем, что 'a' это объект вида {start: number, end: number}
    f.isDateDistance = function(a) {
        return f.isObject(a) && f.isNumber(a.start) && f.isNumber(a.end);
    };

    f.isBoolean = function(a) {
        return typeof a === "boolean";
    };
    
    f.isArrayOfArrays = function(arr) {
        if ( !f.isArray(arr) ) {
            return false;
        }
        
        if ( arr.length === 0 ) {
            return false;
        }
        
        return arr.every(function(elem) {
            return f.isArray(elem);
        });
    };

})();
