;(function() {
    "use strict";
    
    function Events() {}
    
    Events.prototype = {
        on: function(events, handler, once) {
            if ( !this._events ) {this._events={};}

            if (!(events+='') || typeof handler !== 'function')
                return this;

            var name = '', event;
            events = events.split(/\s+/);
            for (var i=0, n= events.length; i<n; i++) {
                name = events[i];
                if (!(name+=''))
                    continue;

                event = this._events[name] || [];

                event.push({
                    once : !!once,
                    callback : handler
                });
                this._events[name] = event;
            }

            return this;
        },
        
        once: function(events, handler) {
            return this.on(events, handler, true);
        },
        
        off: function(events, handler) {
            if ( !this._events ) {this._events={};}

            if (!(events+=''))
                return this;

            var name = '',
                event,
                isFunc = typeof handler === 'function',
                toSave;

            events = events.split(/\s+/);

            for (var i=0, n= events.length; i<n; i++) {
                name = events[i];
                if (!name)
                    continue;

                event = this._events[name] || [];
                if ( !isFunc ) {
                    toSave = [];
                } else {
                    toSave = [];
                    for (var j=0, m=event.length; j<m; j++) {
                        if (event[j].callback === handler)
                            continue;

                        toSave.push(event[j]);
                    }
                    event = toSave;
                }
                if ( toSave.length ) {
                    this._events[name] = toSave;
                } else {
                    delete this._events[name];
                }
            }

            return this;
        },
        
        trigger: function(events) {
            if ( !this._events ) {this._events={};}

            if (typeof events != 'string')
                return this;

            var name = '',
                event,
                saves = [],
                result,
                args = [].slice.call(arguments, 1);

            events = events.split(/\s+/);

            for (var i=0, n = events.length; i<n; i++) {
                name = events[i];
                if ( name === '' ) {
                    continue;
                }

                if ( name != '*' ) {
                    callStack(this, '*', [name].concat(args));
                }
                callStack(this, name, args);
            }

            return this;
        },
        
        triggerAll: function() {
            for (var name in this._events) {
                if ( name == '*' ) {
                    continue;
                }
                callStack(this, name, arguments);
            }
            return this;
        },
        
        clearEvents: function() {
            this._events = {};
            if ( this._eventsListeners ) {
                this._eventsListeners.forEach(function(listener) {
                    listener.obj.off(listener.event, listener.handler);
                });
            }
            this._eventsListeners = [];
            return this;
        },
        
        listenTo: function(listenObj, events, handler) {
            if ( !this._eventsListeners ) {this._eventsListeners=[];}
            
            if ( events == 'all' ) {
                events = 'all *';
            }

            var context = this;

            if ( typeof handler != 'function' ) {
                handler = function(){};
            }
            
            var listener = {
                obj: listenObj,
                event: events,
                handler: handler.bind(context)
            };
            listenObj.on(events, listener.handler);
            this._eventsListeners.push(listener);
        },

        stopListening: function(obj, event) {
            if ( !this._eventsListeners ) {this._eventsListeners=[];}
            
            if ( f.isString(obj) ) {
                event = obj;
                obj = false;
            }
            
            this._eventsListeners.forEach(function(listener) {
                if ( !obj ) {
                    listener.obj.off(event, listener.handler);
                } else
                if ( listener.obj == obj ) {
                    listener.obj.off(event, listener.handler);
                }
            });
        }
    };
	
	function callStack(context, name, args) {
		var newStack = [],
			data,
			stack = context._events[name],
			result;

		if ( !stack ) {
			return;
		}

		for (var i=0, n=stack.length; i<n; i++) {
			data = stack[i];

			if ( typeof data.callback != 'function' ) {
				continue;
			}

			if ( !data.once ) {
				newStack.push(data);
			}

			result = data.callback.apply(context, args);
			if ( result === false ) {
				break;
			}
		}

		if ( newStack.length ) {
			context._events[name] = newStack;
		} else {
			delete context._events[name];
		}
	}
	
	f.Events = Events;
})();
